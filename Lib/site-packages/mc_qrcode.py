"""
Created on 2019年9月25日
@author: spring
"""
from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import *
from PIL import Image
import qrcode
import sys
import platform
import os
import random

logo_route = ""
work_path = ""

def qr_random():
	number = random.randint(1,20)
	return "你抽取到的幸运数字是:"+str(number)

def add_logo():
    global logo_route, work_path
    logo_route = "yes"
    work_path = os.path.abspath(os.path.join(os.getcwd(), ".."))


class ClientResource():
    """
    客户端资源检查
    """

    def __init__(self):
        self.attempts = 1
        self.check_img()

    def download_img(self, file_path, filename):
        import requests
        response = requests.get("https://res.miaocode.com/py-llk/{}".format(filename), timeout=5)

        # 下载重试三次
        # print('正在下载：', filename, "第", self.attempts, "次")
        while not response:
            self.attempts += 1
            if self.attempts < 4:
                self.download_img(file_path, filename)
            self.attempts = 1
            return

        self.save_img(file_path, response)

    def check_img(self):
        filenames = ("client_bg_img.png", "client_icon_img.png")
        for filename in filenames:
            file_path = os.path.join(work_path, filename)
            if not os.path.exists(file_path):
                self.download_img(file_path, filename)

    @staticmethod
    def save_img(file_path, response):
        with open(file_path, 'wb') as f:
            f.write(response.content)


class Ui_MainWindow(QMainWindow):
    """
    文件选择器
    """

    def __init__(self):
        super().__init__()
        # 检查资源图是否存在
        ClientResource()
        self.setupUi(self)
        self.retranslateUi(self)

    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(500, 270)
        self.centralWidget = QWidget(mainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.retranslateUi(mainWindow)

        self.pushButton = QtWidgets.QPushButton(self.centralWidget)
        # 设置按钮大小位置
        self.pushButton.setGeometry(QtCore.QRect(200, 173, 100, 36))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText("打开")
        # 给按钮设置提示语
        self.pushButton.setToolTip("点击这里选择图片")
        mainWindow.setCentralWidget(self.centralWidget)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)
        # 给按钮设置样式
        self.pushButton.setStyleSheet("QPushButton{color:black}"
                                      "QPushButton:hover{color:SkyBlue}"
                                      "QPushButton{background-color:WhiteSmoke}"
                                      "QPushButton{border:2px}"
                                      "QPushButton{border-radius:10px}"
                                      "QPushButton{padding:2px 4px}")
        self.pushButton.setFont(QFont("微软雅黑", 15, QFont.Black))

        # 绑定事件
        self.pushButton.clicked.connect(self.openFile)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        # 给主窗口设置标题
        mainWindow.setWindowTitle(_translate("mainWindow", "选择图片"))
        # 给主窗口设置图标
        img_path = os.path.join(work_path, "client_icon_img.png")
        if os.path.exists(img_path):
            mainWindow.setWindowIcon(QtGui.QIcon(img_path))

        # 设置背景
        img_path = os.path.join(work_path, "client_bg_img.png")
        if os.path.exists(img_path):
            mainWindow.setStyleSheet(
                "#mainWindow{border-image:url(%s);}" % (img_path.replace("\\", "/")))

    def openFile(self):
        global logo_route
        logo_route, file_type = QFileDialog.getOpenFileName(self, '选择文件', '', 'files(*.*)')
        if logo_route == "":
            print("\n取消选择")
            return

        QApplication.exit()


def logo_edit(img):
    """
    logo处理
    :param img:
    :return: img
    """
    app = QApplication(sys.argv)
    mainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    app.exec_()

    # 设置logo参数
    img = img.convert("RGBA")  # 二维码设为彩色
    # 根据不同电脑系统生成不同路径
    try:
        if platform.platform().lower().find("windows") != -1:
            logo = Image.open(logo_route.replace("/", "\\"))
        else:
            logo = Image.open(logo_route)
    except:
        print("\n没有选择图片文件")
        return img

    logo_w, logo_h = logo.size
    w, h = img.size
    logo_w = w // 4
    logo_h = h // 4
    logo = logo.resize((logo_w, logo_h))
    l_w = int((w - logo_w) / 2)

    l_h = int((h - logo_h) / 2)
    logo = logo.convert("RGBA")
    img.paste(logo, (l_w, l_h))
    return img


def make(url="请输入二维码内容", fill_color="black", back_color="white"):
    """
    制作二维码
    :param url:
    :param fill_color:
    :param back_color:
    :return: null
    """
    qr = qrcode.QRCode(
        version=5,  # 设置容错率为最高
        error_correction=qrcode.ERROR_CORRECT_H,  # 用于控制二维码的错误纠正程度
        box_size=10,  # 控制二维码中每个格子的像素数，默认为10
        border=2,  # 二维码四周留白，包含的格子数，默认为4
    )

    qr.add_data(url)  # QRCode.add_data(data)函数添加数据
    qr.make(fit=True)  # QRCode.make(fit=True)函数生成图片

    img = qr.make_image(fill_color=fill_color, back_color=back_color)

    # 选择logo图片
    if logo_route == "yes":
        img = logo_edit(img)

    # 保存二维码到用户桌面
    if platform.platform().lower().find("windows") != -1:
        import winreg
        desktop_path = winreg.QueryValueEx(winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                                                          r'Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders'),
                                           "Desktop")[0]
        img.save(desktop_path + "\\myqrcode.png")
    else:
        desktop_path = os.popen("cd ~/Desktop && pwd")
        img.save(desktop_path.read().replace("\n", "") + "/my_qrcode.png")

    # 展示二维码
    img.show()


if __name__ == "__main__":
    # add_logo()  # 调用此函数添加logo
    make("谁扫谁是PIG!", "purple", "pink")